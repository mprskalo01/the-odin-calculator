{"mappings":"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","sources":["<anon>","src/ts/index.ts","src/ts/classes/Calculator.ts"],"sourcesContent":["// Current problematic index.ts (assumed)\nclass $743add3e79a5a50b$export$770682f56f7e9e8f {\n    constructor(){\n        this.firstNum = null;\n        this.operator = '';\n        this.calculated = false;\n        this.period = false;\n        // Initialize DOM elements\n        this.display = document.querySelector('.display');\n        this.previousNumber = document.querySelector('.previousNumber');\n        this.periodButton = document.querySelector('#period');\n        if (!this.display || !this.previousNumber || !this.periodButton) throw new Error('Required DOM elements not found');\n        this.initializeEventListeners();\n    }\n    initializeEventListeners() {\n        document.querySelectorAll('[data-number]').forEach((button)=>{\n            button.addEventListener('click', (e)=>{\n                const target = e.target;\n                this.addNumber(target.dataset.number);\n            });\n        });\n        document.querySelectorAll('[data-operator]').forEach((button)=>{\n            button.addEventListener('click', (e)=>{\n                const target = e.target;\n                this.setOperator(target.dataset.operator);\n            });\n        });\n        document.querySelectorAll('[data-action]').forEach((button)=>{\n            button.addEventListener('click', (e)=>{\n                const target = e.target;\n                const action = target.dataset.action;\n                switch(action){\n                    case 'clear':\n                        this.clearEverything();\n                        break;\n                    case 'backspace':\n                        this.backspace();\n                        break;\n                    case 'period':\n                        this.setPeriod();\n                        break;\n                    case 'equals':\n                        this.operate();\n                        break;\n                }\n            });\n        });\n    }\n    add(a, b) {\n        return a + b;\n    }\n    subtract(a, b) {\n        return a - b;\n    }\n    multiply(a, b) {\n        return a * b;\n    }\n    divide(a, b) {\n        if (b === 0) {\n            alert('Cannot divide by 0');\n            this.clearEverything();\n            return null;\n        }\n        return a / b;\n    }\n    modulus(a, b) {\n        return a % b;\n    }\n    clearDisplay() {\n        this.display.textContent = '';\n        this.period = false;\n        this.disablePeriod(false);\n    }\n    clearEverything() {\n        this.clearDisplay();\n        this.previousNumber.textContent = '';\n        this.operator = '';\n        this.calculated = false;\n        this.firstNum = null;\n    }\n    addNumber(value) {\n        this.calculated = false;\n        if (this.calculated && !this.previousNumber.textContent) this.clearEverything();\n        this.display.textContent = `${this.display.textContent ?? ''}${value}`;\n    }\n    backspace() {\n        if (this.calculated) return;\n        this.calculated = false;\n        const currentText = this.display.textContent ?? '';\n        if (currentText.slice(-1) === '.') {\n            this.period = false;\n            this.disablePeriod(false);\n        }\n        this.display.textContent = currentText.slice(0, -1);\n    }\n    setPeriod() {\n        const currentText = this.display.textContent ?? '';\n        if (!this.period && currentText !== '') {\n            this.period = true;\n            this.display.textContent = `${currentText}.`;\n            this.disablePeriod(true);\n        }\n    }\n    disablePeriod(disable) {\n        this.periodButton.disabled = disable;\n        if (disable) this.periodButton.classList.add('disabled');\n        else this.periodButton.classList.remove('disabled');\n    }\n    setOperator(op) {\n        const currentText = this.display.textContent ?? '';\n        if (currentText === '' || currentText === '.') return;\n        if (this.firstNum !== null && !this.calculated) this.operate();\n        else this.firstNum = parseFloat(currentText);\n        this.operator = op;\n        this.previousNumber.textContent = `${this.firstNum} ${op}`;\n        this.clearDisplay();\n    }\n    toFixedIfNecessary(value) {\n        return +parseFloat(value.toString()).toFixed(6);\n    }\n    operate() {\n        const currentText = this.display.textContent ?? '';\n        if (currentText === '' || currentText === '.' || this.firstNum === null) return;\n        const secondNum = parseFloat(currentText);\n        let result;\n        switch(this.operator){\n            case '+':\n                result = this.add(this.firstNum, secondNum);\n                break;\n            case '-':\n                result = this.subtract(this.firstNum, secondNum);\n                break;\n            case '*':\n                result = this.multiply(this.firstNum, secondNum);\n                break;\n            case '/':\n                {\n                    const divResult = this.divide(this.firstNum, secondNum);\n                    if (divResult === null) return;\n                    result = divResult;\n                    break;\n                }\n            case '%':\n                result = this.modulus(this.firstNum, secondNum);\n                break;\n            default:\n                console.log('Invalid operator');\n                return;\n        }\n        this.display.textContent = this.toFixedIfNecessary(result).toString();\n        this.previousNumber.textContent = '';\n        this.operator = '';\n        this.calculated = true;\n        this.firstNum = result;\n    }\n}\n\n\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    new (0, $743add3e79a5a50b$export$770682f56f7e9e8f)();\n});\n\n\n//# sourceMappingURL=index.f9c25ea4.js.map\n","// Current problematic index.ts (assumed)\nimport { Calculator } from './classes/Calculator';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  new Calculator();\n});\n","export class Calculator {\n  private display: HTMLElement;\n  private previousNumber: HTMLElement;\n  private periodButton: HTMLButtonElement;\n  private firstNum: number | null = null;\n  private operator: string = '';\n  private calculated: boolean = false;\n  private period: boolean = false;\n\n  constructor() {\n    // Initialize DOM elements\n    this.display = document.querySelector('.display') as HTMLElement;\n    this.previousNumber = document.querySelector(\n      '.previousNumber'\n    ) as HTMLElement;\n    this.periodButton = document.querySelector('#period') as HTMLButtonElement;\n\n    if (!this.display || !this.previousNumber || !this.periodButton) {\n      throw new Error('Required DOM elements not found');\n    }\n\n    this.initializeEventListeners();\n  }\n\n  private initializeEventListeners(): void {\n    document.querySelectorAll('[data-number]').forEach(button => {\n      button.addEventListener('click', e => {\n        const target = e.target as HTMLButtonElement;\n        this.addNumber(target.dataset.number as string);\n      });\n    });\n\n    document.querySelectorAll('[data-operator]').forEach(button => {\n      button.addEventListener('click', e => {\n        const target = e.target as HTMLButtonElement;\n        this.setOperator(target.dataset.operator as string);\n      });\n    });\n\n    document.querySelectorAll('[data-action]').forEach(button => {\n      button.addEventListener('click', e => {\n        const target = e.target as HTMLButtonElement;\n        const action = target.dataset.action;\n\n        switch (action) {\n          case 'clear':\n            this.clearEverything();\n            break;\n          case 'backspace':\n            this.backspace();\n            break;\n          case 'period':\n            this.setPeriod();\n            break;\n          case 'equals':\n            this.operate();\n            break;\n        }\n      });\n    });\n  }\n\n  private add(a: number, b: number): number {\n    return a + b;\n  }\n\n  private subtract(a: number, b: number): number {\n    return a - b;\n  }\n\n  private multiply(a: number, b: number): number {\n    return a * b;\n  }\n\n  private divide(a: number, b: number): number | null {\n    if (b === 0) {\n      alert('Cannot divide by 0');\n      this.clearEverything();\n      return null;\n    }\n    return a / b;\n  }\n\n  private modulus(a: number, b: number): number {\n    return a % b;\n  }\n\n  private clearDisplay(): void {\n    this.display.textContent = '';\n    this.period = false;\n    this.disablePeriod(false);\n  }\n\n  private clearEverything(): void {\n    this.clearDisplay();\n    this.previousNumber.textContent = '';\n    this.operator = '';\n    this.calculated = false;\n    this.firstNum = null;\n  }\n\n  private addNumber(value: string | number): void {\n    this.calculated = false;\n    if (this.calculated && !this.previousNumber.textContent) {\n      this.clearEverything();\n    }\n\n    this.display.textContent = `${this.display.textContent ?? ''}${value}`;\n  }\n\n  private backspace(): void {\n    if (this.calculated) return;\n    this.calculated = false;\n    const currentText = this.display.textContent ?? '';\n\n    if (currentText.slice(-1) === '.') {\n      this.period = false;\n      this.disablePeriod(false);\n    }\n\n    this.display.textContent = currentText.slice(0, -1);\n  }\n\n  private setPeriod(): void {\n    const currentText = this.display.textContent ?? '';\n    if (!this.period && currentText !== '') {\n      this.period = true;\n      this.display.textContent = `${currentText}.`;\n      this.disablePeriod(true);\n    }\n  }\n\n  private disablePeriod(disable: boolean): void {\n    this.periodButton.disabled = disable;\n    if (disable) {\n      this.periodButton.classList.add('disabled');\n    } else {\n      this.periodButton.classList.remove('disabled');\n    }\n  }\n\n  private setOperator(op: string): void {\n    const currentText = this.display.textContent ?? '';\n    if (currentText === '' || currentText === '.') return;\n\n    if (this.firstNum !== null && !this.calculated) {\n      this.operate();\n    } else {\n      this.firstNum = parseFloat(currentText);\n    }\n\n    this.operator = op;\n    this.previousNumber.textContent = `${this.firstNum} ${op}`;\n    this.clearDisplay();\n  }\n\n  private toFixedIfNecessary(value: number): number {\n    return +parseFloat(value.toString()).toFixed(6);\n  }\n\n  private operate(): void {\n    const currentText = this.display.textContent ?? '';\n    if (currentText === '' || currentText === '.' || this.firstNum === null)\n      return;\n\n    const secondNum = parseFloat(currentText);\n    let result: number;\n\n    switch (this.operator) {\n      case '+':\n        result = this.add(this.firstNum, secondNum);\n        break;\n      case '-':\n        result = this.subtract(this.firstNum, secondNum);\n        break;\n      case '*':\n        result = this.multiply(this.firstNum, secondNum);\n        break;\n      case '/': {\n        const divResult = this.divide(this.firstNum, secondNum);\n        if (divResult === null) return;\n        result = divResult;\n        break;\n      }\n      case '%':\n        result = this.modulus(this.firstNum, secondNum);\n        break;\n      default:\n        console.log('Invalid operator');\n        return;\n    }\n\n    this.display.textContent = this.toFixedIfNecessary(result).toString();\n    this.previousNumber.textContent = '';\n    this.operator = '';\n    this.calculated = true;\n    this.firstNum = result;\n  }\n}\n"],"names":["$743add3e79a5a50b$export$770682f56f7e9e8f","constructor","firstNum","operator","calculated","period","display","document","querySelector","previousNumber","periodButton","Error","initializeEventListeners","querySelectorAll","forEach","button","addEventListener","e","target","addNumber","dataset","number","setOperator","action","clearEverything","backspace","setPeriod","operate","add","a","b","subtract","multiply","divide","alert","modulus","clearDisplay","textContent","disablePeriod","value","currentText","slice","disable","disabled","classList","remove","op","parseFloat","toFixedIfNecessary","toString","toFixed","result","secondNum","divResult","console","log"],"version":3,"file":"index.f9c25ea4.js.map"}